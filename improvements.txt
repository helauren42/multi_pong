To get comfortable with the concepts and syntax in this file, here are a couple of exercises that you can try:

Exercise 1: Add a Player Boost Feature
Objective:
Add a feature that allows players to boost their paddle speed temporarily when a key is held down.

Steps:
Add a boostSpeed Property:

Modify the Player.new method to include a new property boostSpeed, set to a higher value (e.g., 6).
javascript
Copier le code
new: function(side) {
    return {
        // ... existing properties
        boostSpeed: 6,  // New property
    };
}
Track Boost Key State:

Modify the listen method to handle new keys (Shift for player 1 and Space for player 2) to trigger the boost. Set a new property isBoosting to true when the key is down, and false when released.
javascript
Copier le code
listen: function() {
    document.addEventListener("keydown", function(key) {
        // Existing key handlers...
        switch(key.code) {
            case "ShiftLeft":
                Pong.player1.isBoosting = true;
                break;
            case "Space":
                Pong.player2.isBoosting = true;
                break;
        }
    });

    document.addEventListener("keyup", function(key) {
        // Existing key handlers...
        switch(key.code) {
            case "ShiftLeft":
                Pong.player1.isBoosting = false;
                break;
            case "Space":
                Pong.player2.isBoosting = false;
                break;
        }
    });
}
Apply Boost in update Method:

Modify the update method to check if the player is boosting and use the boostSpeed if so.
javascript
Copier le code
update: function() {
    let player1Speed = Pong.player1.isBoosting ? Pong.player1.boostSpeed : Pong.player1.speed;
    let player2Speed = Pong.player2.isBoosting ? Pong.player2.boostSpeed : Pong.player2.speed;
    
    if (this.player1.direction) {
        let move = this.player1.direction * player1Speed + this.player1.y;
        if (move >= 0 && move <= this.canvas.height - this.player1.height) {
            this.player1.y = move;
        }
    }

    if (this.player2.direction) {
        let move = this.player2.direction * player2Speed + this.player2.y;
        if (move >= 0 && move <= this.canvas.height - this.player2.height) {
            this.player2.y = move;
        }
    }
    
    // Existing ball update logic...
}
Testing:
Test the feature by playing the game and holding the Shift key for player 1 or Space for player 2 to observe the speed boost.

Exercise 2: Create Power-Ups
Objective:
Implement power-ups that appear on the canvas and temporarily change the ball's speed or size when collected by the ball.

Steps:
Add Power-Up Creation:

Add a new method createPowerUp to randomly generate a power-up on the canvas.
javascript
Copier le code
createPowerUp: function() {
    return {
        x: Math.random() * (this.canvas.width - 20),
        y: Math.random() * (this.canvas.height - 20),
        width: 20,
        height: 20,
        type: Math.random() < 0.5 ? "speed" : "size",  // Random type
        color: "orange"
    };
}
Initialize Power-Up:

Add a powerUp property to the Game object and initialize it in initialize.
javascript
Copier le code
this.powerUp = this.createPowerUp();
Draw Power-Up:

Modify the draw method to render the power-up.
javascript
Copier le code
draw: function() {
    // Existing draw code...
    
    // Draw power-up
    this.context.fillStyle = this.powerUp.color;
    this.context.fillRect(
        this.powerUp.x,
        this.powerUp.y,
        this.powerUp.width,
        this.powerUp.height
    );
}
Handle Power-Up Collection:

Modify the update method to check if the ball intersects with the power-up and apply the effect.
javascript
Copier le code
update: function() {
    // Existing update code...
    
    // Power-up collision detection
    if (this.ball.x < this.powerUp.x + this.powerUp.width &&
        this.ball.x + this.ball.width > this.powerUp.x &&
        this.ball.y < this.powerUp.y + this.powerUp.height &&
        this.ball.y + this.ball.height > this.powerUp.y) {
            
        if (this.powerUp.type === "speed") {
            this.ball.speed *= 1.5;  // Increase speed
        } else if (this.powerUp.type === "size") {
            this.ball.width *= 1.5;  // Increase size
            this.ball.height *= 1.5;
        }
        // Remove the power-up
        this.powerUp = this.createPowerUp();
    }
}
Testing:
Test the feature by observing the ball behavior when it intersects with the power-up and verifying the changes in speed or size.

Exercise 3: Implement Scoring Sound Effects
Objective:
Play a sound effect whenever a player scores.

Steps:
Add Sound Files:

Add sound files (score.mp3 or any preferred format) to your project directory.
Load Sound in initialize:

Load the sound file in the initialize method.
javascript
Copier le code
initialize: function() {
    // Existing initialization code...
    this.scoreSound = new Audio('score.mp3');
}
Play Sound on Score:

Modify the update method to play the sound when a player scores.
javascript
Copier le code
update: function() {
    // Existing ball update code...
    
    if (this.ball.x + this.ball.width > this.canvas.width) {
        this.player1.score++;
        this.scoreSound.play();
        // Reset ball position and speed
        this.ball.x = (this.canvas.width / 2) - (this.ball.width / 2);
        this.ball.speed = 1;
    } else if (this.ball.x < 0) {
        this.player2.score++;
        this.scoreSound.play();
        // Reset ball position and speed
        this.ball.x = (this.canvas.width / 2) - (this.ball.width / 2);
        this.ball.speed = 1;
    }
}
Testing:
Test the feature by scoring points and ensuring the sound plays each time a point is scored.

Concepts Covered:
Object Factory Methods: Understand how factory functions can be used to create objects.
Event Handling: Learn how to handle keyboard events to control game elements.
Game Loop: Familiarize yourself with game loop mechanics for continuous game updates.
Collision Detection: Implement basic collision detection between game elements.
Adding Features: Practice enhancing game functionality with new features like boosts and power-ups.
These exercises should help you become more familiar with JavaScript object creation, game loops, event handling, and adding new functionality to a game.
